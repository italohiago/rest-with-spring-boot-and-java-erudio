package br.com.erudio.service;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.web.WebResourcesRuntimeHints;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;

import br.com.erudio.exceptions.ResourceNotFoundException;
import br.com.erudio.model.Person;
import br.com.erudio.repositories.PersonRepository;

@Service
public class PersonServices {

	private Logger logger = Logger.getLogger(PersonServices.class.getName());
	
	@Autowired
	PersonRepository personRepository;
	
	public Person findById(Long id) {	
		logger.info("Finding person with id: " + id);
		
		return personRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("No records founded for this ID!"));
	}
	
	public List<Person> findAll() {	
		logger.info("Finding ALL persons");

		return personRepository.findAll();
	}
	
	public Person create(Person person) {	
		logger.info("Creating one person");
		
		return personRepository.save(person);
	}
	
	public Person update(Person person) {	
		logger.info("Updating one person");
		
		Person entity = personRepository.findById(person.getId()).orElseThrow(() -> new ResourceNotFoundException("No records founded for this ID!"));
		
		entity.setFirstName(person.getFirstName());
		entity.setLastName(person.getLastName());
		entity.setAdress(person.getAdress());
		entity.setGender(person.getGender());
		
		return personRepository.save(person);
	}
	
	public void delete(Long id) {	
		logger.info("Deleting one person");
		
		Person entity = personRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("No records founded for this ID!"));
		
		personRepository.delete(entity);
		
	}
}
